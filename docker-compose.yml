version: '3'  

services:
  goapp:
    build: .
    command: go run cmd/walletcore/main.go
    volumes:
      - .:/app/
    ports:
      - 8080:8080  
    depends_on:
      - kafka
      - mysql
    networks:
      - kafka-network    
      

  mysql:
    image: mysql:5.7
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wallet
      MYSQL_PASSWORD: root
    ports:
      - 3307:3306
    volumes:
      - .docker/mysql:/var/lib/mysql   
      - ./schema-mysql.sql:/docker-entrypoint-initdb.d/1.sql
      - ./data-mysql.sql:/docker-entrypoint-initdb.d/2.sql
    networks:
      - kafka-network      

  zookeeper:
    image: "confluentinc/cp-zookeeper:6.1.0"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: Sao_Paulo/Brazil
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000    
    networks:
      - kafka-network      

  kafka:
    image: "confluentinc/cp-enterprise-kafka:6.1.0"
    container_name: kafka
    # command: sh -c "wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh && chmod +x wait-for-it.sh && ./wait-for-it.sh zookeeper:2181  && kafka-topics --create --topic transactions --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092 && kafka-topics --create --topic balances --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092"
    depends_on:
      - zookeeper
    ports:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - '9092:9092'
    environment:
      TZ: Sao_Paulo/Brazil
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'true'      

    networks:
      - kafka-network    


  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021    
    networks:
      - kafka-network 

  api1: # API - Inst√¢ncia 01
    image: lucasmadeira/wallet-consumer
    container_name: wallet-consumer
    hostname: wallet-consumer
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/walletcore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - db
    ports:
      - 3003:8080
    networks:
      - kafka-network 

  db: # Banco de dados
    image: postgres:14.5
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: walletcore
    ports:
      - "5439:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kafka-network 
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5     
volumes:
  postgres-data:
networks:
  kafka-network:
    driver: bridge      
